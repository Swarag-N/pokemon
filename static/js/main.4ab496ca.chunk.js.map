{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","num","URL","this","props","id","slice","class","className","name","src","alt","type","base_experience","Component","Pokedex","result","isWinner","exp","pokemon","map","p","Pokegame","player1","player2","length","randInt","Math","floor","random","randMon","splice","push","exp1","reduce","exp2","defaultProps","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ab496ca.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Pokecard.css'\r\n// const POKE_URL = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\"\r\nconst POKE_URL = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\"\r\nclass Pokecard extends Component{\r\n    render(){\r\n        // function padding(num,to){\r\n        //     let str = String(num)\r\n        //     while(str.length<to){\r\n        //         str = \"0\"+str\r\n        //     }\r\n        //     return str\r\n        // }\r\n        // let paddedNum = padding(this.props.id,3)\r\n        let padTo3 = (num)=>(num<=999?`00${num}`.slice(-3):num)\r\n        let URL = `${POKE_URL}${padTo3(this.props.id)}.png`\r\n        return(\r\n            <div class=\"Pokecard\">\r\n                <div className=\"Pokecard-title\">{this.props.name}</div>\r\n                <div className=\"Pokecard-img\">\r\n                    <img src={URL} alt={this.props.name}/>\r\n                </div>\r\n                <div className=\"Pokecard-Data\">Type : {this.props.type}</div>\r\n                <div className=\"Pokecard-Data\">Experince: {this.props.base_experience}</div>\r\n            </div>   \r\n        )\r\n    }\r\n}\r\n\r\nexport default  Pokecard","import React, { Component } from 'react'\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css'\r\n\r\nclass Pokedex extends Component{\r\n    render(){\r\n        let result;\r\n        if (this.props.isWinner){\r\n            result=<h1 className=\"Pokedex-Winner\">Winner</h1>\r\n        }else{\r\n            result=<h1 className=\"Pokedex-Loser\">Loser</h1>\r\n        }\r\n        return(\r\n            <div className=\"Pokedex\">\r\n                {result}\r\n                <h4>Toatal Exp: {this.props.exp}</h4>\r\n                <div className=\"Pokedex-Cards\">\r\n                    {this.props.pokemon.map((p) => (\r\n                        <Pokecard name={p.name} id={p.id} base_experience={p.base_experience} type={p.type} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokedex","import React, { Component } from 'react'\r\nimport Pokedex from \"./Pokedex\";\r\n\r\nclass Pokegame extends Component{\r\n    static defaultProps  = {\r\n        pokemon:[\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ]\r\n    }\r\n    render(){\r\n        let player1 = [];\r\n        let player2 = [...this.props.pokemon];\r\n        while(player1.length < player2.length){\r\n            let randInt = Math.floor(Math.random() * player2.length);\r\n            let randMon = player2.splice(randInt,1)[0];\r\n            player1.push(randMon)\r\n        }\r\n        let exp1 = player1.reduce((exp,pokemon)=>exp+pokemon.base_experience,0)\r\n        let exp2 = player2.reduce((exp,pokemon)=>exp+pokemon.base_experience,0)\r\n        return (\r\n            <div className=\"Pokegame\">\r\n                <Pokedex pokemon={player1} exp={exp1} isWinner={exp1>exp2}/>\r\n                <Pokedex pokemon={player2} exp={exp2} isWinner={exp2>exp1}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame","import React,{Component} from 'react';\nimport Pokegame from './Pokegame';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Pokegame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}